A = {'x1': 0.3, 'x2': 0.7}
B = {'x1': 0.6, 'x2': 0.4}
R = {('x1', 'y1'): 0.3, ('x1', 'y2'): 0.7}
S = {('y1', 'z1'): 0.5, ('y2', 'z1'): 0.8}

fuzzy_union = lambda A, B: {x: max(A.get(x, 0), B.get(x, 0)) for x in A | B}
fuzzy_intersection = lambda A, B: {x: min(A.get(x, 0), B.get(x, 0)) for x in A | B}
fuzzy_complement = lambda A: {x: round(1 - A[x], 2) for x in A}
fuzzy_difference = lambda A, B: {x: min(A.get(x, 0), 1 - B.get(x, 0)) for x in A | B}
fuzzy_cartesian_product = lambda A, B: {(x, y): min(A[x], B[y]) for x in A for y in B}

def max_min_composition(R, S):
    result = {}
    for (x, y1), rv in R.items():
        for (y2, z), sv in S.items():
            if y1 == y2:
                result[(x, z)] = max(result.get((x, z), 0), min(rv, sv))
    return result

print("Fuzzy Union:", fuzzy_union(A, B))
print("\nFuzzy Intersection:", fuzzy_intersection(A, B))
print("\nFuzzy Complement of A:", fuzzy_complement(A))
print("\nFuzzy Difference (A - B):", fuzzy_difference(A, B))
print("\nFuzzy Cartesian Product (A x B):", fuzzy_cartesian_product(A, B))
print("\nMax-Min Composition (R âˆ˜ S):", max_min_composition(R, S))
