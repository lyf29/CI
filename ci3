import numpy as np

def objective_function(x): return x**2  # Minimize x^2

def clonal_selection(population_size, num_clones, mutation_rate, generations, bounds):
    population = np.random.uniform(bounds[0], bounds[1], population_size)

    for generation in range(generations):
        fitness_scores = np.array([objective_function(individual) for individual in population])
        best_individuals = population[np.argsort(fitness_scores)[:num_clones]]

        clone_pool = np.repeat(best_individuals, num_clones) + \
                     np.random.normal(0, mutation_rate, num_clones * num_clones)
        clone_pool = np.clip(clone_pool, bounds[0], bounds[1])

        new_individuals = np.random.uniform(bounds[0], bounds[1], population_size - num_clones)
        population = np.concatenate([clone_pool, new_individuals])

        print(f"Generation {generation + 1}: Best Fitness = {min(fitness_scores):.4f}, "
              f"Best Solution = {population[np.argmin(fitness_scores)]:.4f}")

    final_best_fitness = min(fitness_scores)
    final_best_solution = population[np.argmin(fitness_scores)]
    return final_best_solution, final_best_fitness

# Run the algorithm
best_solution, best_fitness = clonal_selection(
    population_size=20, num_clones=5, mutation_rate=0.1, generations=50, bounds=(-10, 10)
)

print(f"\nFinal Best: Solution = {best_solution:.4f}, Fitness = {best_fitness:.4f}")
