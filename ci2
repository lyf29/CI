import numpy as np
from sklearn.neural_network import MLPRegressor
from deap import base, creator, tools, algorithms

# Train neural network
X, y = np.array([[150, 30, 3], [160, 35, 4], [170, 40, 2]]), np.array([0.85, 0.90, 0.80])
nn = MLPRegressor(hidden_layer_sizes=(10, 10), max_iter=1000, random_state=42).fit(X, y)

# Fitness function
def evaluate(ind): return nn.predict([ind])[0],

# GA setup
creator.create("FitnessMax", base.Fitness, weights=(1.0,))
creator.create("Individual", list, fitness=creator.FitnessMax)
toolbox = base.Toolbox()
toolbox.register("attr_float", np.random.uniform, 100, 200)
toolbox.register("attr_flow", np.random.uniform, 10, 50)
toolbox.register("attr_pressure", np.random.uniform, 1, 5)
toolbox.register("individual", tools.initCycle, creator.Individual,
                 (toolbox.attr_float, toolbox.attr_flow, toolbox.attr_pressure), n=1)
toolbox.register("population", tools.initRepeat, list, toolbox.individual)
toolbox.register("evaluate", evaluate)
toolbox.register("mate", tools.cxBlend, alpha=0.5)
toolbox.register("mutate", tools.mutGaussian, mu=0, sigma=1, indpb=0.2)
toolbox.register("select", tools.selTournament, tournsize=3)

# Run GA
pop = toolbox.population(n=50)
algorithms.eaSimple(pop, toolbox, cxpb=0.7, mutpb=0.2, ngen=40, verbose=False)

best = tools.selBest(pop, k=1)[0]
print("Best Parameters:", best)
print("Predicted Yield:", evaluate(best)[0])
